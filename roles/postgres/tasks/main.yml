---

- name: generate postgres filestructure
  file:
    path: '{{ item.path }}'
    state: directory
    owner: '{{ item.owner }}'
    group: '{{ item.group }}'
  with_items:
    - { path: '/var/lib/postgresql/data', owner: 'root', group: '999' }

- name: deploy postgres container
  containers.podman.podman_container:
    name: postgres
    image: docker.io/library/postgres:13
    restart_policy: always
    ports:
      - 5432:5432
    env:
      POSTGRES_USER: '{{ pg_user }}'
      POSTGRES_PASSWORD: '{{ pg_password }}'
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data

- name: create postgres configuration files
  template:
    src: '{{ item }}.j2'
    dest: /var/lib/postgresql/data/{{ item }}
    owner: '999'
    group: '999'
    mode: 0600
  with_items:
    - postgresql.conf
    - pg_hba.conf

- name: install postgres certificates
  copy:
    src: /etc/letsencrypt/live/{{ db_domain }}/{{ item.cert }}
    dest: '{{ item.dest }}'
    remote_src: true
    owner: '999'
    group: '999'
    mode: 0400
  with_items:
    - { cert: 'fullchain.pem', dest: '{{ pg_ssl_cert_file }}' }
    - { cert: 'chain.pem', dest: '{{ pg_ssl_ca_file }}' }
    - { cert: 'privkey.pem', dest: '{{ pg_ssl_key_file }}' }
  when: pg_ssl == 'on'

- name: restart postgres container
  containers.podman.podman_container:
    name: postgres
    state: started
    restart: yes

- name: configure firewalld
  firewalld:
    zone: public
    service: postgresql
    permanent: yes
    state: enabled

- name: install psycopg2
  pip:
    name: psycopg2-binary
    state: present

# - name: create test database
#   postgresql_db:
#     login_host: 135.181.42.75
#     login_user: '{{ pg_user }}'
#     login_password: '{{ pg_password }}'
#     maintenance_db: '{{ pg_user }}'
#     name: postgres
#     owner: '{{ pg_user }}'
